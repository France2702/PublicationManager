/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

/**
 *
 * @author Phap Chau
 */
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import entity.Publication;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;

public class PubView extends JFrame implements ActionListener, ItemListener, ListSelectionListener{
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form PubView
     */
    public PubView() {
        initComponents();
        initComponentsHanded();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPanePubTable = new javax.swing.JScrollPane();
        publicationTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        labelTable = new javax.swing.JLabel();
        labelFind = new javax.swing.JLabel();
        cbFind = new javax.swing.JComboBox<>();
        textFieldFind = new javax.swing.JTextField();
        labelArrange = new javax.swing.JLabel();
        labelId = new javax.swing.JLabel();
        labelTitle = new javax.swing.JLabel();
        labelAuthor = new javax.swing.JLabel();
        labelGenre = new javax.swing.JLabel();
        cbArrange = new javax.swing.JComboBox<>();
        labelType = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        textFieldId = new javax.swing.JTextField();
        textFieldTitle = new javax.swing.JTextField();
        textFieldAuthor = new javax.swing.JTextField();
        textFieldType = new javax.swing.JTextField();
        textFieldGenre = new javax.swing.JTextField();
        textFieldPrice = new javax.swing.JTextField();
        labelManipulation = new javax.swing.JLabel();
        labelAbstract = new javax.swing.JLabel();
        jScrollPaneAbstractTA = new javax.swing.JScrollPane();
        textAreaAbstract = new javax.swing.JTextArea();
        labelInformation = new javax.swing.JLabel();
        labelNameApp = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        labelIconApp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setPreferredSize(new java.awt.Dimension(1100, 600));
        setResizable(false);

        publicationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPanePubTable.setViewportView(publicationTable);

        btnAdd.setText("Add");
        btnAdd.setToolTipText("Thêm ấn phẩm mới");
        btnAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnUpdate.setText("Update");
        btnUpdate.setToolTipText("Cập nhật ấn phẩm vừa chỉnh sửa");

        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Xóa đi ấn phẩm đang chọn");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setToolTipText("Xóa đi tất cả thông tin của ấn phẩm trên mục chỉnh sửa");

        labelTable.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        labelTable.setText("List of Publications");
        labelTable.setToolTipText("Danh sách các ấn phẩm được hiển thị");

        labelFind.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelFind.setText("Search by:");

        cbFind.setToolTipText("Chọn loại thông tin của ấn phẩm mà bạn muốn tìm kiếm");
        cbFind.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textFieldFind.setToolTipText("Nhập thông tin liên quan đến ấn phẩm");

        labelArrange.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelArrange.setText("Arrange by:");

        labelId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelId.setText("ID");

        labelTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelTitle.setText("Title");

        labelAuthor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelAuthor.setText("Author");

        labelGenre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelGenre.setText("Genre");

        cbArrange.setToolTipText("Chọn loại thông tin của ấn phẩm căn cứ để sắp xếp");
        cbArrange.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelType.setText("Type");

        labelPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelPrice.setText("Price");

        labelManipulation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelManipulation.setText("Main manipulations");

        labelAbstract.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelAbstract.setText("Abstract");

        textAreaAbstract.setColumns(20);
        textAreaAbstract.setRows(5);
        jScrollPaneAbstractTA.setViewportView(textAreaAbstract);

        labelInformation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelInformation.setText("Information of publication");

        labelNameApp.setFont(new java.awt.Font("Serif", 3, 24)); // NOI18N
        labelNameApp.setForeground(new java.awt.Color(204, 0, 0));
        labelNameApp.setText("Publication Manager");

        btnRefresh.setText("Refresh");
        btnRefresh.setToolTipText("Sắp xếp danh sách theo thứ tự mặc định theo ID");

        btnSearch.setText("Search");

        labelIconApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/book-stack.png"))); // NOI18N
        labelIconApp.setPreferredSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTable)
                        .addGap(316, 316, 316))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelType, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelGenre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelPrice, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelIconApp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelAuthor, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelNameApp, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(textFieldType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                            .addComponent(textFieldAuthor, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldId, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldPrice)
                                            .addComponent(textFieldGenre, javax.swing.GroupLayout.Alignment.LEADING)))))
                            .addComponent(labelId)
                            .addComponent(labelAbstract)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))
                            .addComponent(labelManipulation)
                            .addComponent(labelInformation)
                            .addComponent(jScrollPaneAbstractTA, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 4, Short.MAX_VALUE)
                                .addComponent(labelFind, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbFind, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldFind, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch)
                                .addGap(22, 22, 22)
                                .addComponent(labelArrange)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbArrange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefresh))
                            .addComponent(jScrollPanePubTable))
                        .addGap(47, 47, 47))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFind)
                            .addComponent(cbFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelArrange)
                            .addComponent(cbArrange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNameApp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldFind, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPanePubTable, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelIconApp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelInformation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelId)
                            .addComponent(textFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTitle)
                            .addComponent(textFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAuthor)
                            .addComponent(textFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelType)
                            .addComponent(textFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelGenre)
                            .addComponent(textFieldGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPrice)
                            .addComponent(textFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelAbstract)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneAbstractTA, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelManipulation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PubView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PubView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PubView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PubView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PubView().setVisible(true);
            }
        });
    }
    
    //code thu cong 
    // định nghĩa các cột của bảng publication
        private String [] columnNames = new String [] {
            "ID", "Title", "Author", "Type", "Genre", "Price", "Abstract"};
        // định nghĩa dữ liệu mặc định của bẳng publication là rỗng
        private Object data = new Object [][] {};
        
    //chinh sua thu cong khi khoi tao PubView
    private void initComponentsHanded(){
        // cài đặt các cột và data cho bảng publication
        publicationTable.setModel(new DefaultTableModel((Object[][]) data, columnNames));
        jScrollPanePubTable.setViewportView(publicationTable);
        //jScrollPanePubTable.setPreferredSize(new Dimension (480, 300));
        
        //đẩy nội dung cần sắp xếp vào các item của cbArrange
        cbArrange.addItem("ID");
        cbArrange.addItem("Title");
        cbArrange.addItem("Author");
        cbArrange.addItem("Type");
        cbArrange.addItem("Genre");
        cbArrange.addItem("Price");
        
        //đẩy nội dung cần tìm kiếm vào các item của cbFind
        cbFind.addItem("ID");
        cbFind.addItem("Title");
        cbFind.addItem("Author");
        cbFind.addItem("Type");
        cbFind.addItem("Genre");
        cbFind.addItem("Price");
        
        //labelIconApp.setIcon(new ImageIcon("src\\main\\java\\picture\\book-stack.png"));
        //disable editable IdtextField
        textFieldId.setEditable(false);
        
        // disable Edit and Delete buttons
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        // enable Add button
        btnAdd.setEnabled(true);
    }
    
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    /**
     * hiển thị list publication vào bảng publicationTable
     * 
     * @param list
     */
    public void showListPublications(List<Publication> list) {
        int size = list.size();
        // với bảng publicationTable có 7 cột, 
        // khởi tạo mảng 2 chiều publications, trong đó:
        // số hàng: là kích thước của list publication 
        // số cột: là 7
        Object [][] publications = new Object[size][7];
        for (int i = 0; i < size; i++) {
            publications[i][0] = list.get(i).getId();
            publications[i][1] = list.get(i).getTitle();
            publications[i][2] = list.get(i).getAuthor();
            publications[i][3] = list.get(i).getType();
            publications[i][4] = list.get(i).getGenre();
            publications[i][5] = list.get(i).getPrice();
            publications[i][6] = list.get(i).getAbstract();
        }
        publicationTable.setModel(new DefaultTableModel(publications, columnNames));
    }
    
    /**
     * điền thông tin của hàng được chọn từ bảng publication 
     * vào các trường tương ứng của publication.
     */
    public void fillPublicationFromSelectedRow() {
        // lấy chỉ số của hàng được chọn 
        int row = publicationTable.getSelectedRow();
        if (row >= 0) {
            textFieldId.setText(publicationTable.getModel().getValueAt(row, 0).toString());
            textFieldTitle.setText(publicationTable.getModel().getValueAt(row, 1).toString());
            textFieldAuthor.setText(publicationTable.getModel().getValueAt(row, 2).toString());
            textFieldType.setText(publicationTable.getModel().getValueAt(row, 3).toString());
            textFieldGenre.setText(publicationTable.getModel().getValueAt(row, 4).toString());
            textFieldPrice.setText(publicationTable.getModel().getValueAt(row, 5).toString());
            textAreaAbstract.setText(publicationTable.getModel().getValueAt(row, 6).toString());
            // enable Edit and Delete buttons
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            // disable Add button
            btnAdd.setEnabled(false);
        }
    }

    /**
     * xóa thông tin publication
     */
    public void clearPublicationInfo() {
        textFieldId.setText("");
        textFieldTitle.setText("");
        textFieldAuthor.setText("");
        textFieldType.setText("");
        textFieldGenre.setText("");
        textFieldPrice.setText("");
        textAreaAbstract.setText("");
        // disable Edit and Delete buttons
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        // enable Add button
        btnAdd.setEnabled(true);
    }
    
    /**
     * hiện thị thông tin publication
     * 
     * @param publication
     */
    public void showPublication(Publication publication) {
        textFieldId.setText("" + publication.getId());
        textFieldTitle.setText(publication.getTitle());
        textFieldAuthor.setText(publication.getAuthor());
        textFieldType.setText(publication.getType());
        textFieldGenre.setText(publication.getGenre());
        textFieldPrice.setText("" + publication.getPrice());
        textAreaAbstract.setText(publication.getAbstract());
        // enable Edit and Delete buttons
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        // disable Add button
        btnAdd.setEnabled(false);
    }
    
    /**
     * lấy thông tin publication
     * 
     * @return
     */
    public Publication getPublicationInfo() {
        // validate publication
        if (!validateTitle() || !validateAuthor() || !validateType() || !validateGenre() || !validatePrice() || !validateAbstract()) {
            return null;
        }
        try {
            Publication publication = new Publication();
            if (textFieldId.getText() != null && !"".equals(textFieldId.getText())) {
                publication.setId(Integer.parseInt(textFieldId.getText()));
            }
            publication.setTitle(textFieldTitle.getText().trim());
            publication.setAuthor(textFieldAuthor.getText().trim());
            publication.setType(textFieldType.getText().trim());
            publication.setGenre(textFieldGenre.getText().trim());
            publication.setPrice(Integer.parseInt(textFieldPrice.getText().trim()));
            publication.setAbstract(textAreaAbstract.getText().trim());
            return publication;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
    
    private boolean validateTitle() {
        String title = textFieldTitle.getText();
        if (title == null || "".equals(title.trim())) {
            textFieldTitle.requestFocus();
            showMessage("The title name field can not be blank.");
            return false;
        }
        return true;
    }
    
    private boolean validateAuthor() {
        String author = textFieldAuthor.getText();
        if (author == null || "".equals(author.trim())) {
            textFieldAuthor.requestFocus();
            showMessage("The author name field can not be blank.");
            return false;
        }
        return true;
    }
    
    private boolean validateType() {
        String type = textFieldType.getText();
        if (type == null || "".equals(type.trim())) {
            textFieldType.requestFocus();
            showMessage("The type field can not be blank.");
            return false;
        }
        return true;
    }
    
    private boolean validateGenre() {
        String genre = textFieldGenre.getText();
        if (genre == null || "".equals(genre.trim())) {
            textFieldGenre.requestFocus();
            showMessage("The genre field can not be blank.");
            return false;
        }
        return true;
    }
    
    
    private boolean validatePrice() {
        try {
            int price = Integer.parseInt(textFieldPrice.getText().trim());
            if (price < 0) {
                textFieldPrice.requestFocus();
                showMessage("The price is not valid because it must be greater than 0.");
                return false;
            }
        } catch (Exception e) {
            textFieldPrice.requestFocus();
            showMessage("The price field is not valid!");
            return false;
        }
        return true;
    }
    
    private boolean validateAbstract() {
//        String abs = textAreaAbstract.getText();
//        if (abs == null || "".equals(abs.trim())) {
//            textAreaAbstract.requestFocus();
//            showMessage("The abstract field can not be blank.");
//            return false;
//        }
        return true;
    }
    
    public void actionPerformed(ActionEvent e) {
    }
    
    public void valueChanged(ListSelectionEvent e) {
    }
    
    public void itemStateChanged(ItemEvent e) {
    }
    
    public void addAddPublicationListener(ActionListener listener) {
        btnAdd.addActionListener(listener);
    }
    
    public void addUpdatePublicationListener(ActionListener listener) {
        btnUpdate.addActionListener(listener);
    }
    
    public void addDeletePublicationListener(ActionListener listener) {
        btnDelete.addActionListener(listener);
    }
    
    public void addClearListener(ActionListener listener) {
        btnClear.addActionListener(listener);
    }
    
    public void addSortPublicationListener(ItemListener listener) {
        cbArrange.addItemListener(listener);
    }
    
    public void addSearchPublicationListenerbtnSearch(ActionListener listener) {
        btnSearch.addActionListener(listener);  
    }
    
    public void addSearchPublicationListenertextFieldFind(KeyListener listener) {
        textFieldFind.addKeyListener(listener); 
    }
    
    public void addSearchPublicationListenercbFind(ItemListener listener) {
        cbFind.addItemListener(listener);
    }
    
    public void addRefreshPublicationListener(ActionListener listener) {
        btnRefresh.addActionListener(listener);
    }
    
    public void addListPublicationSelectionListener(ListSelectionListener listener) {
        publicationTable.getSelectionModel().addListSelectionListener(listener);
    }
    
    public String getSelectedItemFind(){
        return (String) cbFind.getSelectedItem();
    }
    
    public String getTextFind(){
        return textFieldFind.getText();
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbArrange;
    private javax.swing.JComboBox<String> cbFind;
    private javax.swing.JScrollPane jScrollPaneAbstractTA;
    private javax.swing.JScrollPane jScrollPanePubTable;
    private javax.swing.JLabel labelAbstract;
    private javax.swing.JLabel labelArrange;
    private javax.swing.JLabel labelAuthor;
    private javax.swing.JLabel labelFind;
    private javax.swing.JLabel labelGenre;
    private javax.swing.JLabel labelIconApp;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelInformation;
    private javax.swing.JLabel labelManipulation;
    private javax.swing.JLabel labelNameApp;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelTable;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelType;
    private javax.swing.JTable publicationTable;
    private javax.swing.JTextArea textAreaAbstract;
    private javax.swing.JTextField textFieldAuthor;
    private javax.swing.JTextField textFieldFind;
    private javax.swing.JTextField textFieldGenre;
    private javax.swing.JTextField textFieldId;
    private javax.swing.JTextField textFieldPrice;
    private javax.swing.JTextField textFieldTitle;
    private javax.swing.JTextField textFieldType;
    // End of variables declaration//GEN-END:variables
}
